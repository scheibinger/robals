                   UML Modeling Module: Bank App Sample  
==================================================================================

This document is a quick overview for the UML Bank App sample.  The Java and UML 
projects included in the sample are provided as a means of introducing you 
to the Reverse Engineering feature of the NetBeans 5.5, UML Modeling module.  The 
sample Java project has a default name of UMLBankAppSample and the sample UML project 
has the default name of UMLBankAppSample-Model. The sample Java project was reverse 
engineered to generate the sample UML Modeling project and its elements.


To open the sample UML Modeling project:
---------------------------------------

1) In the IDE's Projects window, navigate to the sample UML project node. 
   If you used the default project name values, the UML Modeling project name would 
   be UMLBankAppSample-Model.

2) Expand the UMLBankAppSample-Model > Model > bankpack node.
   The elements displayed under this node were generated using the existing Java 
   source files you can find under the UMLBankAppSample > Source Packages > bankpack 
   node.

3) Expand the UMLBankAppSample-Model > bankpack > BankAccount node.
   Notice the Attributes, Operations, and Relationship nodes that represent the 
   attributes, operations, and relationships in the BankAccount.java file.

4) Now, double-click the UMLBankAppSample-Model > Model > BankClassDiagram node.
   The BankClassDiagram is displayed on the Diagram Editor to the right of the Projects 
   window. This BankClassDiagram diagram was generated by selecting the bankpack node 
   and all the elements displayed under it. Then, using the Generate Diagram from 
   Selected Elements feature, the class diagram is generated.

5) Use the "Reverse Engineering a Java Application" tutorial to learn more about how 
   to use the Reverse Engineering feature of the UML Modeling module. Copy and paste
   the following link to your browser: http://www.netbeans.org/kb/55/uml-rev-eng-app.html
   You will notice that the tutorial additionally creates a sequence diagram for the 
   Checking class' withdraw operation. It is not packaged with this sample, but to create
   this sequence diagram, navigate to Checking -> Operations -> withdraw. Right-click
   withdraw and select Reverse Engineer Operation. Select Sequence Diagram and name
   the diagram as desired and click OK. The diagram will be created and opened.

6) For a detailed interactive demonstration of the steps to reverse engineer a Java 
   application, View the flash video at http://uml.netbeans.org/kb/55/uml-rev-eng-app-flash.html.
